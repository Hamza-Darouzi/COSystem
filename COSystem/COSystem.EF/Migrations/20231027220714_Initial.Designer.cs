// <auto-generated />
using System;
using COSystem.EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace COSystem.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231027220714_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("COSystem.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("COSystem.Core.Models.DistributionBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DistributionBranch", (string)null);
                });

            modelBuilder.Entity("COSystem.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("COSystem.Core.Models.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionBranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionBranchId");

                    b.ToTable("Production", (string)null);
                });

            modelBuilder.Entity("COSystem.Core.Models.ProductionBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProductionBranch", (string)null);
                });

            modelBuilder.Entity("COSystem.Core.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistributionBranchId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionBranchId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DistributionBranchId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionBranchId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("COSystem.Core.Models.DistributionBranch", b =>
                {
                    b.HasOne("COSystem.Core.Models.Company", "Company")
                        .WithMany("DistributionBranches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("COSystem.Core.Models.Product", b =>
                {
                    b.HasOne("COSystem.Core.Models.Company", null)
                        .WithMany("Products")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("COSystem.Core.Models.Production", b =>
                {
                    b.HasOne("COSystem.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COSystem.Core.Models.ProductionBranch", "ProductionBranch")
                        .WithMany("Productions")
                        .HasForeignKey("ProductionBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductionBranch");
                });

            modelBuilder.Entity("COSystem.Core.Models.ProductionBranch", b =>
                {
                    b.HasOne("COSystem.Core.Models.Company", "Company")
                        .WithMany("ProductionBranches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("COSystem.Core.Models.Transaction", b =>
                {
                    b.HasOne("COSystem.Core.Models.DistributionBranch", "DistributionBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("DistributionBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("COSystem.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COSystem.Core.Models.ProductionBranch", "ProductionBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductionBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DistributionBranch");

                    b.Navigation("Product");

                    b.Navigation("ProductionBranch");
                });

            modelBuilder.Entity("COSystem.Core.Models.Company", b =>
                {
                    b.Navigation("DistributionBranches");

                    b.Navigation("ProductionBranches");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("COSystem.Core.Models.DistributionBranch", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("COSystem.Core.Models.ProductionBranch", b =>
                {
                    b.Navigation("Productions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
